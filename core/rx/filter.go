package rx

var LPF180k = FIRCoefficients{
	-0.001502377285864444,
	-0.001755430442807170,
	-351.9254313414917310E-6,
	0.003151904706196451,
	0.007531994380123161,
	0.009671300831104597,
	0.005862318290697766,
	-0.005535791325922063,
	-0.021433767216324843,
	-0.033301150234642529,
	-0.029736658723507156,
	-0.001854362565331493,
	0.050976565458314381,
	0.118359745029248009,
	0.181293484242359554,
	0.219341463060807595,
	0.219341463060807595,
	0.181293484242359554,
	0.118359745029248009,
	0.050976565458314381,
	-0.001854362565331493,
	-0.029736658723507156,
	-0.033301150234642529,
	-0.021433767216324843,
	-0.005535791325922063,
	0.005862318290697766,
	0.009671300831104597,
	0.007531994380123161,
	0.003151904706196451,
	-351.9254313414917310E-6,
	-0.001755430442807170,
	-0.001502377285864444,
}

var BPF180k = FIRCoefficients{
	-500.2224827445224380E-6,
	0.002032803591645328,
	0.004510916446260192,
	-0.007665194260810892,
	-0.010725278408831545,
	0.012394599119554836,
	0.010987805280756206,
	-0.004741263228960416,
	0.007748437760646843,
	-0.027056083579710420,
	-0.052559092334240429,
	0.082293169846524350,
	0.113111931075065120,
	-0.141153821574914518,
	-0.162533291923439044,
	0.174103000527520813,
	0.174103000527520813,
	-0.162533291923439044,
	-0.141153821574914518,
	0.113111931075065120,
	0.082293169846524350,
	-0.052559092334240429,
	-0.027056083579710420,
	0.007748437760646843,
	-0.004741263228960416,
	0.010987805280756206,
	0.012394599119554836,
	-0.010725278408831545,
	-0.007665194260810892,
	0.004510916446260192,
	0.002032803591645328,
	-500.2224827445224380E-6,
}

var BPF1k8 = FIRCoefficients{
	0.001382937920461239,
	-0.002633867822386418,
	-0.004521347437277773,
	0.007177394204554208,
	0.010702549967252435,
	-0.015146213450064210,
	-0.020489278956523409,
	0.026631864461749540,
	0.033388568455003785,
	-0.040492930850368786,
	-0.047611670108786683,
	0.054367972673716229,
	0.060371809256008803,
	-0.065254151442646735,
	-0.068701240282945816,
	0.070484850746804412,
	0.070484850746804412,
	-0.068701240282945816,
	-0.065254151442646735,
	0.060371809256008803,
	0.054367972673716229,
	-0.047611670108786683,
	-0.040492930850368786,
	0.033388568455003785,
	0.026631864461749540,
	-0.020489278956523409,
	-0.015146213450064210,
	0.010702549967252435,
	0.007177394204554208,
	-0.004521347437277773,
	-0.002633867822386418,
	0.001382937920461239,
}

type FIRCoefficients []float64

func NewFIR(source SampleSource, coeff FIRCoefficients) *FIRFilter {
	return NewDecimFIR(source, coeff, 1)
}

func NewDecimFIR(source SampleSource, coeff FIRCoefficients, decim int) *FIRFilter {
	return &FIRFilter{
		source: source,
		coeff:  coeff,
		buf:    make([]complex128, len(coeff)),
		order:  len(coeff),
		decim:  decim,
	}
}

type FIRFilter struct {
	source   SampleSource
	coeff    FIRCoefficients
	buf      []complex128
	bufIndex int
	order    int
	decim    int
}

func (f *FIRFilter) next(in complex128) complex128 {
	f.buf[f.bufIndex] = in

	var result complex128
	for i, c := range f.coeff {
		result += complex(c, c) * f.buf[(f.order-i+f.bufIndex)%f.order]
	}

	f.bufIndex = (f.bufIndex + 1) % f.order

	return result
}

func (f *FIRFilter) ReadBlock() ([]complex128, error) {
	in, err := f.source.ReadBlock()
	if err != nil {
		return nil, err
	}

	result := make([]complex128, len(in)/f.decim)

	for i := 0; i < len(in); i += f.decim {
		result[i/f.decim] = f.next(in[i])
	}

	return result, nil
}

func NewDownsampler(source SampleSource, factor int) *Downsampler {
	return &Downsampler{
		source: source,
		factor: factor,
	}
}

type Downsampler struct {
	source SampleSource
	factor int
}

func (d *Downsampler) ReadBlock() ([]complex128, error) {
	in, err := d.source.ReadBlock()
	if err != nil {
		return nil, err
	}

	result := make([]complex128, len(in)/d.factor)

	for i := 0; i < len(in); i += d.factor {
		result[i/d.factor] = in[i]
	}

	return result, nil
}
